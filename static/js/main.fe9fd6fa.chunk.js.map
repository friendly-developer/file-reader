{"version":3,"sources":["components/FileUpload.js","components/OutputForm.js","components/OutputTable.js","utils/OutputTableUtils.js","components/Output.js","components/Dashboard.js","components/App.js","index.js"],"names":["FileUpload","onUpload","useState","file","setFile","inputRef","useRef","className","onClick","current","click","required","ref","type","accept","onChange","e","uploadedFile","target","files","includes","name","fileReader","FileReader","readAsText","onload","console","error","hidden","OutputForm","onUpdate","delimiter","setDelimiter","lines","setLines","useEffect","value","stopPropagation","min","OutputTable","rowsData","formData","fileData","processedData","Object","keys","length","modifiedRows","split","map","row","updatedRow","processData","convertedRows","r","Output","data","setFormData","Dashboard","fileContents","setFileContents","result","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe9fd6fa.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst FileUpload = ({ onUpload }) => {\n  const [file, setFile] = useState(null);\n  const inputRef = useRef(null);\n  const triggerFileUpload = () => {\n    inputRef.current.click();\n  };\n  const readFile = (e) => {\n    const uploadedFile = e.target.files[0];\n    const supportedFileTypes = [\"text/plain\", \"text/csv\"];\n    if (!uploadedFile || !supportedFileTypes.includes(uploadedFile.type)) {\n      console.error(\"Invalid file selected\");\n      return;\n    }\n    setFile(uploadedFile.name);\n    const fileReader = new FileReader();\n    fileReader.readAsText(uploadedFile);\n    fileReader.onload = onUpload;\n  };\n  return (\n    <div className=\"ui grid\">\n      <div className=\"four wide column\">Choose the file to upload</div>\n      <div className=\"three wide column\">\n        <button className=\"ui primary button\" onClick={triggerFileUpload}>\n          Upload File\n        </button>\n        <input\n          required\n          ref={inputRef}\n          type=\"file\"\n          accept=\".txt,.csv\"\n          onChange={readFile}\n          hidden\n        ></input>\n        {file}\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;\n","import React, { useState, useEffect } from \"react\";\n\nconst OutputForm = ({ onUpdate }) => {\n  const [delimiter, setDelimiter] = useState(\"|\");\n  const [lines, setLines] = useState(\"2\");\n\n  const handleDelimiterChange = (e) => {\n    e.stopPropagation();\n    setDelimiter(e.target.value);\n  };\n  const handleLinesChange = (e) => {\n    e.stopPropagation();\n    setLines(e.target.value);\n  };\n\n  useEffect(() => {\n    onUpdate(delimiter, lines);\n  });\n\n  return (\n    <div className=\"ui grid\">\n      <div className=\"four wide column\">\n        <div className=\"ui labeled input\">\n          <div className=\"ui label\">Delimiter</div>\n          <input\n            type=\"text\"\n            value={delimiter}\n            onChange={handleDelimiterChange}\n          />\n        </div>\n      </div>\n      <div className=\"four wide column\">\n        <div className=\"ui labeled input\">\n          <div className=\"ui label\">Lines</div>\n          <input\n            type=\"number\"\n            value={lines}\n            min=\"0\"\n            onChange={handleLinesChange}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OutputForm;\n","import React from \"react\";\nimport { processData } from \"../utils/OutputTableUtils\";\n\nconst OutputTable = ({ formData, fileData }) => {\n  let processedData = [];\n\n  const generateTable = (rowsData) => {\n    if (rowsData.length === 0) {\n      return (\n        <div className=\"ui segment\">\n          No results to display! Select a different file or modify the filters.\n        </div>\n      );\n    }\n    return rowsData.map((row) => {\n      const convertedRows = row.map((r) => (\n        <div key={r} className=\"ui segment\">\n          {r}\n        </div>\n      ));\n      return <div className=\"ui horizontal segments\">{convertedRows}</div>;\n    });\n  };\n\n  if (Object.keys(formData).length > 0 && fileData) {\n    processedData = processData(formData, fileData);\n  }\n\n  return <div className=\"ui segments\">{generateTable(processedData)}</div>;\n};\n\nexport default OutputTable;\n","export const processData = ({ lines, delimiter }, fileData) => {\n  if (lines < 0) return [];\n  const rows = fileData.split(\"\\n\");\n  const modifiedRows = rows.map((row) => {\n    const updatedRow = row.split(delimiter);\n    if (updatedRow.length > 4) {\n      updatedRow.length = 4;\n    }\n    return updatedRow;\n  });\n\n  if (modifiedRows.length > lines) {\n    modifiedRows.length = lines;\n  }\n  debugger;\n  return modifiedRows;\n};\n","import React, { useState } from \"react\";\nimport OutputForm from \"./OutputForm\";\nimport OutputTable from \"./OutputTable\";\n\nconst Output = ({ data }) => {\n  const [formData, setFormData] = useState({});\n  const onFormUpdate = (delimiter, lines) => {\n    if (delimiter !== formData.delimiter || lines !== formData.lines)\n      setFormData({ delimiter, lines });\n  };\n  return (\n    <>\n      <OutputForm onUpdate={onFormUpdate} />\n      {data && <OutputTable formData={formData} fileData={data} />}\n    </>\n  );\n};\n\nexport default Output;\n","import React, { useState } from \"react\";\nimport FileUpload from \"./FileUpload\";\nimport Output from \"./Output\";\n\nconst Dashboard = () => {\n  const [fileContents, setFileContents] = useState(null);\n  const onUpload = (e) => setFileContents(e.target.result);\n\n  return (\n    <div className=\"ui container\">\n      <h1 className=\"ui header\">File Reader</h1>\n\n      <div>\n        <FileUpload onUpload={onUpload} />\n        <Output data={fileContents} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./Dashboard\";\n\nconst App = () => {\n  return (\n    <div>\n      <Dashboard />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}